数据结构
	排序
		冒泡排序
			重复比较相邻的两个元素，如果一个元素比另一个元素大，交换两个元素的位置，重复这一比较直到最后一个元素。
			两次比较，1、第一个循环表示一个要重复几次操作，每一次操作都是拿前一个数跟后一个数比较，然后相邻的排序
					 2、第二次循环才开始真正比较*相邻(n, n + 1)*的元素大小并且排序，循环最初开始的位置下标为0，一直到数据的最后(数组个数 - 第几次循环的序号(是1中的循环序号))
					 	这次循环完成后，会将此次最大的数排到当前循环的数组最后一个位置，所以2步骤会将每次最大的数拿到最后排序。
					 当以上步骤全部执行完后，会发现数组已经从小到大排序完毕，原因就是因为步骤2的排序关系
		选择排序
			重复两次
				1、选中当前一个数据下标n
				2、第二次循环起始位置从步骤1的下一坐标(n+1)开始一直到数组的最后坐标(array.count)，步骤2 循环完毕后，可以获得最小的值，然后将值放在步骤1中的第一个坐标(n)
				思路，每次比较获取最小的值，放在数组的最前面，最大的值自然而然排在了最后。
		快速排序
		

二分法排序
	(start + end) / 2 = mid

	沙盒文件目录属性
		应用程序包  包含了应用程序的源文件
		Documents	最常用的目录，当前文件下的内容会iTunes进行同步，适合存储重要数据
		Library
			Caches	iTunes不会进行同步，适合存储体积大不需要备份的数据
			Preferences	会同步次文件夹的内容，通常保存应用的设置信息
		tmp	存储临时性的文件，程序可能没运行时就会删除该目录下的文件，不同步
	plist文件保存，通过xml的方式进行保存
		保存类型：NSArray, NSMutableArray, NSDictionary, NSMut..., NSData, NSMut.., NSDate, NSNumber, NSString, NSMut..

	获得文件路径
	NSString *filePath = [NSSearchPathForDirctores....];
	读取文件  initWithContensOfFile:fileName
	写入	writeToFile:atomically:YES;是否需要先写入一个文件

	开启图形上下文
	UIGraphicsBeginImageContextWithOptions(CGSize, YES, 0);
	使用drawInRect绘制图片
	从当前上下文获取图片，
	UIImage *image = UIGraphicsGetImageFromCurrentContext();
	关闭上下文
	UIGraphicsEndImageContext();
	
	
	
	
	
	
	
	FCModel 第三方框架问题备注
	schemaVersion 表示含义
	属性：primaryKey表示含义
	关于对象的数据更新操作
	[object  executeUpdateQuery:@"sql语句"]
	[object save]; 
	[object save:^{}];	// 更新数据
	// 或者直接使用类方法来查询数据，详细查看源码
	// 查询方法，类方法
+ (NSArray *)resultDictionariesFromQuery:(NSString *)query, ...;

	